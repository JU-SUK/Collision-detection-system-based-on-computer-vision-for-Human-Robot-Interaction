import tensorflow as tf
import numpy as np
import cv2
import pyrealsense2 as rs
import timeit
import math
from vpython import *
import tkinter as tk

class DepthCamera:
    def __init__(self):
        # Configure depth and color streams
        self.pipeline = rs.pipeline()
        config = rs.config()

        # Get device product line for setting a supporting resolution
        pipeline_wrapper = rs.pipeline_wrapper(self.pipeline)
        pipeline_profile = config.resolve(pipeline_wrapper)
        device = pipeline_profile.get_device()
        device_product_line = str(device.get_info(rs.camera_info.product_line))

        config.enable_stream(rs.stream.depth, 1280, 720, rs.format.z16, 30)
        config.enable_stream(rs.stream.color, 1280, 720, rs.format.bgr8, 30)

        # Start streaming
        self.pipeline.start(config)

        # align depth to color
        align_to = rs.stream.color
        self.align = rs.align(align_to)

    def get_frame(self):
        frames = self.pipeline.wait_for_frames()
        aligned_frames = self.align.process(frames)
        depth_frame = aligned_frames.get_depth_frame()
        color_frame = aligned_frames.get_color_frame()

        # intrinsic을 위한
        depth_frame_for_intrinsic = depth_frame

        if not depth_frame or not color_frame:
            # if there is no frame, probably camera not connected
            print("Error, impossibile to get the frame, make sure that the camera is correctly connected")
            return False, None, None

        # Apply filter to fill the Holes in the depth image
        spatial = rs.spatial_filter()
        spatial.set_option(rs.option.holes_fill, 3)
        filtered_depth = spatial.process(depth_frame)

        hole_filling = rs.hole_filling_filter()
        filled_depth = hole_filling.process(filtered_depth)

        # create colormap to show the depth of the Objects
        colorizer = rs.colorizer()
        depth_colormap = np.asanyarray(colorizer.colorize(filled_depth).get_data())

        # Convert images to numpy arrays
        # distance = depth_frame.get_distance(int(50),int(50))
        # print("distance",distance)
        depth_image = np.asanyarray(filled_depth.get_data())
        color_image = np.asanyarray(color_frame.get_data())

        depth_colormap_dim = depth_colormap.shape
        color_colormap_dim = color_image.shape

        # if depth and color resolution are different, resize color images to match depth image for display
        if depth_colormap_dim != color_colormap_dim:
            resized_color_image = cv2.resize(color_image, dsize=(depth_colormap_dim[1], depth_colormap_dim[0]),
                                             interpolation=cv2.INTER_AREA)
            images = np.hstack((resized_color_image, depth_colormap))
        else:
            images = np.hstack((color_image, depth_colormap))

        return True, color_image, depth_image, depth_colormap, depth_frame_for_intrinsic

    def release(self):
        self.pipeline.stop()


def draw_keypoints(frame, keypoints, confidence_threshold):
    y, x, c = frame.shape  # y coord, x coord, channel coordinates
    shaped = np.squeeze(
        np.multiply(keypoints, [y, x, 1]))  # multiply our frame shape를 해줘서 실제 좌표값 confidence는 transform 해주기 싫으니 1 곱하구

    for kp in shaped:
        ky, kx, kp_conf = kp
        if kp_conf > confidence_threshold:
            cv2.circle(frame, (int(kx), int(ky)), 4, (0, 255, 0), -1)


def draw_connections(frame, keypoints, edges, confidence_threshold):
    y, x, c = frame.shape
    shaped = np.squeeze(np.multiply(keypoints, [y, x, 1]))

    for edge, color in edges.items():
        p1, p2 = edge
        y1, x1, c1 = shaped[p1]
        y2, x2, c2 = shaped[p2]

        if (c1 > confidence_threshold) & (c2 > confidence_threshold):
            cv2.line(frame, (int(x1), int(y1)), (int(x2), int(y2)), (0, 0, 255), 2)


def get_3d_coordinates(keypoints):
    keypoints_position = keypoints_with_scores_color[0][0][keypoints]
    keypoints_position_int = np.array(keypoints_position[:2] * [720, 1280]).astype(int).tolist()
    keypoints_position_int.reverse()  # movenet 결과는 [y,x]로 반환하기 때문에

    distance = depth_frame_for_intrinsic.get_distance(keypoints_position_int[0], keypoints_position_int[1])

    keypoints_3d = rs.rs2_deproject_pixel_to_point(depth_intrin, keypoints_position_int, distance)

    keypoints_3d[1], keypoints_3d[2] = keypoints_3d[2], -keypoints_3d[1]

    return keypoints_3d
    # specified in meters, with the coordinate [0,0,0] referring to the center of the physical imager(Left IR)


def get_own_xyz(vector1, vector2):
    z = np.array([vector1[0] - vector2[0], vector1[1] - vector2[1], vector1[2] - vector2[2]])
    y = np.array([vector1[1] - vector2[1], vector2[0] - vector1[0], 0])
    x = np.cross(z, y)
    return x, y, z


def make_unit_vector(vector):
    vector = vector / np.linalg.norm(vector)
    return vector


def point_distance(point1, point2):
    distance = math.sqrt(pow(point2[0] - point1[0], 2) + pow(point2[1] - point1[1], 2) + pow(point2[2] - point1[2], 2))
    return distance

def text(n):
    label = tk.Label(text=(str(n)), font = "Forte 80", fg = 'red', bg = 'white')
    label.master.overrideredirect(True)
    label.master.geometry("+312+312")
    label.master.lift()
    label.master.wm_attributes("-topmost",True)
    label.master.wm_attributes("-disabled",True)
    label.master.wm_attributes("-transparentcolor","white")
    label.after(4000, label.master.destroy)
    label.pack()
    label.mainloop()

def checkOBBcollision(box_1, box_2):
    # [3,3]인 c,absC 리스트 생성, [1,3]인 d 리스트 생성
    c = [[0] * 3 for i in range(3)]
    absC = [[0] * 3 for i in range(3)]
    d = [0, 0, 0]
    cutoff = 0.9999999
    existsParallelPair = False

    # 중심 사이 거리 계산
    diff = box_1[0] - box_2[0]

    # 행렬 c = a.axis * b.axis.transpose
    # Box_1의 x축으로 비교
    for i in range(3):
        c[0][i] = box_1[1].dot(box_2[i + 1])
        absC[0][i] = abs(c[0][i])
        if (absC[0][i] > cutoff):
            existsParallelPair = True
    d[0] = diff.dot(box_1[1])
    r = abs(d[0])
    r0 = box_1[4][0]
    r1 = box_2[4][0] * absC[0][0] + box_2[4][1] * absC[0][1] + box_2[4][2] * absC[0][2]
    if r > r0 + r1:
        return False

    # Box_1의 y축으로 비교
    for i in range(3):
        c[1][i] = box_1[2].dot(box_2[i + 1])
        absC[1][i] = abs(c[1][i])
        if (absC[1][i] > cutoff):
            existsParallelPair = True
    d[1] = diff.dot(box_1[2])
    r = abs(d[1])
    r0 = box_1[4][1]
    r1 = box_2[4][0] * absC[1][0] + box_2[4][1] * absC[1][1] + box_2[4][2] * absC[1][2]
    if r > r0 + r1:
        return False

    # Box_1의 z축으로 비교
    for i in range(3):
        c[2][i] = box_1[3].dot(box_2[i + 1])
        absC[2][i] = abs(c[2][i])
        if (absC[2][i] > cutoff):
            existsParallelPair = True
    d[2] = diff.dot(box_1[3])
    r = abs(d[2])
    r0 = box_1[4][2]
    r1 = box_2[4][0] * absC[2][0] + box_2[4][1] * absC[2][1] + box_2[4][2] * absC[2][2]
    if r > r0 + r1:
        return False

    # Box_2의 x축으로 비교
    r = abs(diff.dot(box_2[1]))
    r0 = box_1[4][0] * absC[0][0] + box_1[4][1] * absC[1][0] + box_1[4][2] * absC[2][0]
    r1 = box_2[4][0]
    if r > r0 + r1:
        return False

    # Box_2의 y축으로 비교
    r = abs(diff.dot(box_2[2]))
    r0 = box_1[4][0] * absC[0][1] + box_1[4][1] * absC[1][1] + box_1[4][2] * absC[2][1]
    r1 = box_2[4][1]
    if r > r0 + r1:
        return False

    # Box_2의 z축으로 비교
    r = abs(diff.dot(box_2[3]))
    r0 = box_1[4][0] * absC[0][2] + box_1[4][1] * absC[1][2] + box_1[4][2] * absC[2][2]
    r1 = box_2[4][2]
    if r > r0 + r1:
        return False

    # 중간에 체크
    if existsParallelPair == True:
        print("exitstsparallelpair")
        return True

    # cross(Box_1의 x, Box_2의 x)축으로 비교
    r = abs(d[2] * c[1][0] - d[1] * c[2][0])
    r0 = box_1[4][1] * absC[2][0] + box_1[4][2] * absC[1][0]
    r1 = box_2[4][1] * absC[0][2] + box_2[4][2] * absC[0][1]
    if r > r0 + r1:
        return False

    # cross(Box_1의 x, Box_2의 y)축으로 비교
    r = abs(d[2] * c[1][1] - d[1] * c[2][1])
    r0 = box_1[4][1] * absC[2][1] + box_1[4][2] * absC[1][1]
    r1 = box_2[4][0] * absC[0][2] + box_2[4][2] * absC[0][0]
    if r > r0 + r1:
        return False

    # cross(Box_1의 x, Box_2의 z)축으로 비교
    r = abs(d[2] * c[1][2] - d[1] * c[2][2])
    r0 = box_1[4][1] * absC[2][2] + box_1[4][2] * absC[1][2]
    r1 = box_2[4][0] * absC[0][1] + box_2[4][1] * absC[0][0]
    if r > r0 + r1:
        return False

    # cross(Box_1의 y, Box_2의 x)축으로 비교
    r = abs(d[0] * c[2][0] - d[2] * c[0][0])
    r0 = box_1[4][0] * absC[2][0] + box_1[4][2] * absC[0][0]
    r1 = box_2[4][1] * absC[1][2] + box_2[4][2] * absC[1][1]
    if r > r0 + r1:
        return False
    # cross(Box_1의 y, Box_2의 y)축으로 비교
    r = abs(d[0] * c[2][1] - d[2] * c[0][1])
    r0 = box_1[4][0] * absC[2][1] + box_1[4][2] * absC[0][1]
    r1 = box_2[4][0] * absC[1][2] + box_2[4][2] * absC[1][0]
    if r > r0 + r1:
        return False
    # cross(Box_1의 y, Box_2의 z)축으로 비교
    r = abs(d[0] * c[2][2] - d[2] * c[0][2])
    r0 = box_1[4][0] * absC[2][2] + box_1[4][2] * absC[0][2]
    r1 = box_2[4][0] * absC[1][1] + box_2[4][1] * absC[1][0]
    if r > r0 + r1:
        return False
    # cross(Box_1의 z, Box_2의 x)축으로 비교
    r = abs(d[1] * c[0][0] - d[0] * c[1][0])
    r0 = box_1[4][0] * absC[1][0] + box_1[4][1] * absC[0][0]
    r1 = box_2[4][1] * absC[2][2] + box_2[4][2] * absC[2][1]
    if r > r0 + r1:
        return False
    # cross(Box_1의 z, Box_2의 y)축으로 비교
    r = abs(d[1] * c[0][1] - d[0] * c[1][1])
    r0 = box_1[4][0] * absC[1][1] + box_1[4][1] * absC[0][1]
    r1 = box_2[4][0] * absC[2][2] + box_2[4][2] * absC[2][0]
    if r > r0 + r1:
        return False
    # cross(Box_1의 z, Box_2의 z)축으로 비교
    r = abs(d[1] * c[0][2] - d[0] * c[1][2])
    r0 = box_1[4][0] * absC[1][2] + box_1[4][1] * absC[0][2]
    r1 = box_2[4][0] * absC[2][1] + box_2[4][1] * absC[2][0]
    if r > r0 + r1:
        return False

    return True


# Initialize the TFLite interpreter
interpreter = tf.lite.Interpreter(
    model_path="C:\\Users\\MinLab\Desktop\\internship_JS\\lite-model_movenet_singlepose_thunder_3.tflite")
interpreter.allocate_tensors()

EDGES = {
    (0, 1): 'm',
    (0, 2): 'c',
    (1, 3): 'm',
    (2, 4): 'c',
    (0, 5): 'm',
    (0, 6): 'c',
    (5, 7): 'm',
    (7, 9): 'm',
    (6, 8): 'c',
    (8, 10): 'c',
    (5, 6): 'y',
    (5, 11): 'm',
    (6, 12): 'c',
    (11, 12): 'y',
    (11, 13): 'm',
    (13, 15): 'm',
    (12, 14): 'c',
    (14, 16): 'c'
}
# 193개의 데이터 0초부터 32초까지,베이스 좌표계 기준임
robot_base_x = [0 for i in range(193)]
robot_base_y = [0 for i in range(193)]
robot_base_z = [0.08 for i in range(193)]

robot_shoulder_x = [0.0589, 0.058902969, 0.058902969, 0.058902969, 0.058902969, 0.058902969, 0.058902969, 0.058902969,
                    0.058902969, 0.058902969, 0.058902969, 0.058902969, 0.058902969, 0.058902969, 0.058902969,
                    0.058902969, 0.058902969, 0.058902969, 0.058902969, 0.058902969, 0.058902969, 0.058902969,
                    0.058902969, 0.058902969, 0.058902969, 0.058902969, 0.058902969, 0.058902969, 0.058902969,
                    0.058902969, 0.058902969, 0.058902969, 0.058902969, 0.058902969, 0.058902969, 0.058902969,
                    0.058902969, 0.058902969, 0.058902969, 0.058902969, 0.058902969, 0.058902969, 0.058902969,
                    0.058902969, 0.058902969, 0.058902969, 0.058902969, 0.058902969, 0.058902969, 0.058902969,
                    0.058902969, 0.058902969, 0.058902969, 0.058902969, 0.058902969, 0.058902969, 0.058902969,
                    0.058902969, 0.058902969, 0.058902969, 0.058902969, 0.058902969, 0.058902969, 0.058902969,
                    0.058902969, 0.058902958, 0.058902772, 0.058898042, 0.058868181, 0.058770272, 0.058547635,
                    0.058141485, 0.0574935, 0.056529389, 0.055093027, 0.052271207, 0.051154142, 0.050267696,
                    0.049363899, 0.04849638, 0.047614175, 0.046519039, 0.045182506, 0.043432263, 0.040769348,
                    0.037393813, 0.033128439, 0.027214883, 0.023386506, 0.019477656, 0.013952491, 0.006800565,
                    0.001947767, -0.002914428, -0.008937923, -0.015728963, -0.020500679, -0.025170286, -0.030692555,
                    -0.03669801, -0.041869418, -0.045807125, -0.049243817, -0.05297552, -0.054810954, -0.056553799,
                    -0.057205882, -0.05776905, -0.058176607, -0.058489459, -0.058696761, -0.058818009, -0.0588773,
                    -0.058899341, -0.058902506, -0.058903059, -0.058903343, -0.058903418, -0.058903228, -0.058903119,
                    -0.058903055, -0.058903014, -0.058902991, -0.058902978, -0.058902972, -0.05890297, -0.058902969,
                    -0.058902969, -0.058902969, -0.058902969, -0.058902969, -0.058902969, -0.058902969, -0.058902969,
                    -0.058902969, -0.058902969, -0.058902969, -0.058902969, -0.058902969, -0.058902969, -0.058902969,
                    -0.058902969, -0.058902969, -0.058902969, -0.058902969, -0.058902969, -0.058902969, -0.058902969,
                    -0.058902969, -0.058902969, -0.058902969, -0.058902969, -0.058902969, -0.058902969, -0.058902969,
                    -0.058902969, -0.058902969, -0.058902969, -0.058902969, -0.058902969, -0.058902969, -0.058851622,
                    -0.058598506, -0.058087909, -0.057196061, -0.055757045, -0.053575791, -0.050192117, -0.044413527,
                    -0.041386817, -0.03823294, -0.035487997, -0.033222352, -0.030231902, -0.026539421, -0.021522899,
                    -0.0130878, -0.003752357, 0.005888641, 0.015622503, 0.025972817, 0.03662833, 0.046233845,
                    0.05387129, 0.055363042, 0.056623178, 0.057450112, 0.058084909, 0.058498515, 0.058737972,
                    0.058853842, 0.058896283, 0.058901604]
robot_shoulder_y = [-0.037821161, -0.037821161, -0.037821161, -0.037821161, -0.037821161, -0.037821161, -0.037821161,
                    -0.037821161, -0.037821161, -0.037821161, -0.037821161, -0.037821161, -0.037821161, -0.037821161,
                    -0.037821161, -0.037821161, -0.037821161, -0.037821161, -0.037821161, -0.037821161, -0.037821161,
                    -0.037821161, -0.037821161, -0.037821161, -0.037821161, -0.037821161, -0.037821161, -0.037821161,
                    -0.037821161, -0.037821161, -0.037821161, -0.037821161, -0.037821161, -0.037821161, -0.037821161,
                    -0.037821161, -0.037821161, -0.037821161, -0.037821161, -0.037821161, -0.037821161, -0.037821161,
                    -0.037821161, -0.037821161, -0.037821161, -0.037821161, -0.037821161, -0.037821161, -0.037821161,
                    -0.037821161, -0.037821161, -0.037821161, -0.037821161, -0.037821161, -0.037821161, -0.037821161,
                    -0.037821161, -0.037821161, -0.037821161, -0.037821161, -0.037821161, -0.037821161, -0.037821161,
                    -0.037821161, -0.037821161, -0.037821178, -0.037821468, -0.037828833, -0.037875286, -0.038027031,
                    -0.038368925, -0.038981633, -0.03993116, -0.041284721, -0.043182848, -0.04655879, -0.047783405,
                    -0.048715077, -0.04963069, -0.05047872, -0.051311698, -0.052306586, -0.053465327, -0.054896617,
                    -0.056902199, -0.059175187, -0.061664467, -0.064493024, -0.065977809, -0.067235563, -0.068595393,
                    -0.069668876, -0.069972896, -0.069939303, -0.069427038, -0.068209968, -0.066930727, -0.065318119,
                    -0.062912376, -0.059609194, -0.056097699, -0.052931156, -0.049749839, -0.045755811, -0.043540319,
                    -0.041251276, -0.040342124, -0.039531466, -0.038929197, -0.038457551, -0.038140401, -0.037953153,
                    -0.037861108, -0.037826811, -0.037821883, -0.037821021, -0.037820578, -0.037820462, -0.037820757,
                    -0.037820928, -0.037821027, -0.037821091, -0.037821127, -0.037821147, -0.037821157, -0.03782116,
                    -0.037821161, -0.037821161, -0.037821161, -0.037821161, -0.037821161, -0.037821161, -0.037821161,
                    -0.037821161, -0.037821161, -0.037821161, -0.037821161, -0.037821161, -0.037821161, -0.037821161,
                    -0.037821161, -0.037821161, -0.037821161, -0.037821161, -0.037821161, -0.037821161, -0.037821161,
                    -0.037821161, -0.037821161, -0.037821161, -0.037821161, -0.037821161, -0.037821161, -0.037821161,
                    -0.037821161, -0.037821161, -0.037821161, -0.037821161, -0.037821161, -0.037821161, -0.037821161,
                    -0.037901011, -0.038291189, -0.039061424, -0.040356048, -0.042322003, -0.045051466, -0.048792944,
                    -0.054105809, -0.056454684, -0.058636527, -0.060337402, -0.061613921, -0.063135031, -0.064773908,
                    -0.066609044, -0.068765613, -0.069899355, -0.069751874, -0.06823443, -0.065003175, -0.059652036,
                    -0.05255884, -0.044697697, -0.042836125, -0.041155993, -0.039993558, -0.039065885, -0.038443773,
                    -0.038076905, -0.037897564, -0.037831571, -0.037823286]
robot_shoulder_z = [0.24, 0.24, 0.24, 0.24, 0.24, 0.24, 0.24, 0.24, 0.24, 0.24, 0.24, 0.24, 0.24, 0.24, 0.24, 0.24,
                    0.24, 0.24, 0.24, 0.24, 0.24, 0.24, 0.24, 0.24, 0.24, 0.24, 0.24, 0.24, 0.24, 0.24, 0.24, 0.24,
                    0.24, 0.24, 0.24, 0.24, 0.24, 0.24, 0.24, 0.24, 0.24, 0.24, 0.24, 0.24, 0.24, 0.24, 0.24, 0.24,
                    0.24, 0.24, 0.24, 0.24, 0.24, 0.24, 0.24, 0.24, 0.24, 0.24, 0.24, 0.24, 0.24, 0.24, 0.24, 0.24,
                    0.24, 0.24, 0.24, 0.24, 0.24, 0.24, 0.24, 0.24, 0.24, 0.24, 0.24, 0.24, 0.24, 0.24, 0.24, 0.24,
                    0.24, 0.24, 0.24, 0.24, 0.24, 0.24, 0.24, 0.24, 0.24, 0.24, 0.24, 0.24, 0.24, 0.24, 0.24, 0.24,
                    0.24, 0.24, 0.24, 0.24, 0.24, 0.24, 0.24, 0.24, 0.24, 0.24, 0.24, 0.24, 0.24, 0.24, 0.24, 0.24,
                    0.24, 0.24, 0.24, 0.24, 0.24, 0.24, 0.24, 0.24, 0.24, 0.24, 0.24, 0.24, 0.24, 0.24, 0.24, 0.24,
                    0.24, 0.24, 0.24, 0.24, 0.24, 0.24, 0.24, 0.24, 0.24, 0.24, 0.24, 0.24, 0.24, 0.24, 0.24, 0.24,
                    0.24, 0.24, 0.24, 0.24, 0.24, 0.24, 0.24, 0.24, 0.24, 0.24, 0.24, 0.24, 0.24, 0.24, 0.24, 0.24,
                    0.24, 0.24, 0.24, 0.24, 0.24, 0.24, 0.24, 0.24, 0.24, 0.24, 0.24, 0.24, 0.24, 0.24, 0.24, 0.24,
                    0.24, 0.24, 0.24, 0.24, 0.24, 0.24, 0.24, 0.24, 0.24, 0.24, 0.24, 0.24, 0.24, 0.24, 0.24, 0.24,
                    0.24]

robot_inner_link_x = [0.000620156, 0.000608386, 0.000539068, 0.000345161, -0.00010873, -0.001031313, -0.002529799,
                      -0.004717112, -0.007780264, -0.012399315, -0.017986299, -0.024287956, -0.032272336, -0.036852474,
                      -0.041099017, -0.046400901, -0.052105788, -0.053190654, -0.054218744, -0.05467306, -0.055082356,
                      -0.05557982, -0.055940064, -0.056190257, -0.056342277, -0.056421677, -0.056454663, -0.056461988,
                      -0.056462566, -0.056462822, -0.056462978, -0.056463085, -0.05646315, -0.056463185, -0.056463203,
                      -0.056463209, -0.056463211, -0.056463211, -0.056463211, -0.056463211, -0.056463211, -0.056463211,
                      -0.056463211, -0.056463211, -0.056463211, -0.056463211, -0.056448851, -0.05628417, -0.055969544,
                      -0.055401785, -0.054535567, -0.05323448, -0.051123804, -0.047822269, -0.043922062, -0.038164905,
                      -0.031881078, -0.026050723, -0.020076165, -0.01268292, -0.010428491, -0.008138289, -0.005668361,
                      -0.004998823, -0.004772224, -0.004545386, -0.004359642, -0.003807272, -0.003105262, -0.00252902,
                      -0.002407124, -0.003031206, -0.004615125, -0.007336256, -0.011528292, -0.019487229, -0.022485939,
                      -0.02480576, -0.027119182, -0.029292801, -0.03145822, -0.034086221, -0.037208238, -0.041164043,
                      -0.046917553, -0.053795782, -0.061897162, -0.072169554, -0.078286001, -0.084133064, -0.091753741,
                      -0.100559916, -0.105881212, -0.11069164, -0.115925727, -0.120841251, -0.123641642, -0.125826204,
                      -0.127641197, -0.128556414, -0.12831657, -0.127374601, -0.125908849, -0.123485713, -0.121907049,
                      -0.120122456, -0.119373526, -0.118687461, -0.118166915, -0.117752954, -0.117471526, -0.117304223,
                      -0.117221672, -0.11719086, -0.11718643, -0.117185655, -0.117185258, -0.117185153, -0.117185419,
                      -0.117222565, -0.117446356, -0.118013511, -0.11900914, -0.120594997, -0.122888085, -0.126099403,
                      -0.131139363, -0.136600609, -0.144316811, -0.149460237, -0.154263095, -0.155964811, -0.157615565,
                      -0.158470425, -0.159310583, -0.160437127, -0.161658682, -0.163060613, -0.164700683, -0.16672521,
                      -0.16980435, -0.170903029, -0.171944323, -0.172469274, -0.172892725, -0.173166607, -0.173203346,
                      -0.172964137, -0.172408817, -0.171465372, -0.169937052, -0.167446849, -0.164665762, -0.160461033,
                      -0.154238877, -0.148660159, -0.142630821, -0.135142985, -0.126382594, -0.124221837, -0.122565138,
                      -0.121042684, -0.120215708, -0.120016795, -0.120430536, -0.121519, -0.123230956, -0.125451542,
                      -0.127802552, -0.128388766, -0.128594323, -0.128469426, -0.128170508, -0.127523849, -0.126356772,
                      -0.124168164, -0.119056345, -0.111468008, -0.10159974, -0.089527481, -0.074197768, -0.055296094,
                      -0.034759887, -0.015008337, -0.010647884, -0.006798646, -0.004180387, -0.002116037, -0.000743749,
                      6.10555E-05, 0.000453292, 0.000597429, 0.000615517]
robot_inner_link_y = [-0.128591264, -0.128609595, -0.128717552, -0.129019544, -0.129726438, -0.131163274, -0.133497029,
                      -0.136903567, -0.141674143, -0.148867889, -0.157569102, -0.167383351, -0.179818286, -0.186951427,
                      -0.193565027, -0.201822222, -0.210707057, -0.212396636, -0.213997791, -0.214705347, -0.215342787,
                      -0.216117542, -0.216678589, -0.21706824, -0.217304998, -0.217428656, -0.217480028, -0.217491437,
                      -0.217492337, -0.217492736, -0.217492979, -0.217493145, -0.217493246, -0.217493301, -0.217493328,
                      -0.217493339, -0.217493341, -0.217493341, -0.217493341, -0.217493341, -0.217493341, -0.217493341,
                      -0.217493341, -0.217493341, -0.217493341, -0.217493341, -0.217470976, -0.217214501, -0.216724501,
                      -0.215840268, -0.214491214, -0.21246489, -0.209177708, -0.204035871, -0.197961659, -0.188995418,
                      -0.179208937, -0.170128698, -0.160823875, -0.149309578, -0.145798512, -0.142231735, -0.13838505,
                      -0.137342306, -0.136989398, -0.136636059, -0.136345712, -0.135458602, -0.134198356, -0.132764274,
                      -0.131380575, -0.130221298, -0.129356116, -0.128733195, -0.128178868, -0.127121453, -0.126618203,
                      -0.126181232, -0.125702635, -0.125213056, -0.124686133, -0.123993147, -0.123092139, -0.121826224,
                      -0.119728204, -0.116799452, -0.112715745, -0.106431449, -0.102016665, -0.097250838, -0.090096331,
                      -0.080148619, -0.072974426, -0.065448138, -0.055653604, -0.043971468, -0.035338962, -0.026530441,
                      -0.015614821, -0.00305717, 0.00842352, 0.017658111, 0.026135409, 0.03588003, 0.040923946,
                      0.045898732, 0.04781275, 0.049491256, 0.050721575, 0.051675329, 0.052311934, 0.052686025,
                      0.052869439, 0.052937701, 0.052947507, 0.052949221, 0.052950102, 0.052950333, 0.052949745,
                      0.053007018, 0.053355219, 0.054238297, 0.055788773, 0.058258529, 0.06182977, 0.066831088,
                      0.074680358, 0.083185744, 0.095203017, 0.103213427, 0.110693436, 0.113343701, 0.115914598,
                      0.117245964, 0.118554432, 0.12030892, 0.12221138, 0.124394758, 0.126949016, 0.13010203,
                      0.134897505, 0.136608597, 0.138230316, 0.139047879, 0.139707366, 0.140133911, 0.140191128,
                      0.139818583, 0.138953723, 0.137484395, 0.135104177, 0.131225915, 0.12689463, 0.120346151,
                      0.110655718, 0.101967379, 0.092577243, 0.080915629, 0.067272129, 0.063906948, 0.061326793,
                      0.058667519, 0.056004029, 0.053032493, 0.049265286, 0.044315965, 0.037783364, 0.028624599,
                      0.014345264, 0.007326272, 0.000282059, -0.005649521, -0.010417682, -0.016547255, -0.023876348,
                      -0.033442022, -0.048597173, -0.064116933, -0.078826333, -0.092308873, -0.105027563, -0.116096683,
                      -0.123805687, -0.127713929, -0.128151162, -0.128412913, -0.128524792, -0.128575349, -0.128590609,
                      -0.128592745, -0.128591961, -0.128591372, -0.128591287]
robot_inner_link_z = [0.437456076, 0.437444174, 0.437374014, 0.437177175, 0.436713089, 0.435755286, 0.434157522,
                      0.431729398, 0.428130021, 0.422235037, 0.414279865, 0.404066783, 0.388824999, 0.378622001,
                      0.367939247, 0.352426629, 0.331719807, 0.327082854, 0.322403114, 0.320233848, 0.318220318,
                      0.315690763, 0.313797686, 0.31245022, 0.311617636, 0.311178463, 0.31099513, 0.310954343,
                      0.310951123, 0.310949698, 0.310948829, 0.310948234, 0.310947874, 0.310947675, 0.310947579,
                      0.310947542, 0.310947533, 0.310947532, 0.310947532, 0.310947532, 0.310947532, 0.310947532,
                      0.310947532, 0.310947532, 0.310947532, 0.310947532, 0.311027472, 0.311937146, 0.313640347,
                      0.316606926, 0.320897411, 0.326889358, 0.335687216, 0.347737615, 0.360029305, 0.375459115,
                      0.389642085, 0.400942803, 0.411048616, 0.42185377, 0.424821645, 0.427693638, 0.430636953,
                      0.43140821, 0.431666718, 0.431924274, 0.432134954, 0.432773109, 0.433665068, 0.434659322,
                      0.435597419, 0.436362485, 0.436902758, 0.437228152, 0.437388643, 0.437447168, 0.437451799,
                      0.437453718, 0.437454799, 0.437455368, 0.437455687, 0.437455891, 0.437456001, 0.437456053,
                      0.437456072, 0.437456076, 0.437456076, 0.437456077, 0.437456076, 0.437456076, 0.437456076,
                      0.437456077, 0.437456077, 0.437456076, 0.437456076, 0.437456077, 0.437456077, 0.437456076,
                      0.437456076, 0.437456077, 0.437456077, 0.437456077, 0.437456076, 0.437456076, 0.437456076,
                      0.437456076, 0.437456076, 0.437456076, 0.437456076, 0.437456076, 0.437456076, 0.437456076,
                      0.437456076, 0.437456076, 0.437456076, 0.437456076, 0.437456076, 0.437456076, 0.437456076,
                      0.437418658, 0.437191719, 0.436611338, 0.435574634, 0.433875709, 0.431312828, 0.427503457,
                      0.420970471, 0.413047408, 0.400106351, 0.390112045, 0.379552358, 0.375473921, 0.371324559,
                      0.369094958, 0.366846304, 0.363736382, 0.36023248, 0.356026638, 0.350827037, 0.343928659,
                      0.332163691, 0.327494263, 0.322780006, 0.320280987, 0.318198193, 0.31681675, 0.316629293,
                      0.317840679, 0.320573338, 0.324986276, 0.331614735, 0.341322811, 0.350941155, 0.363669159,
                      0.379609029, 0.391749171, 0.403128486, 0.4152542, 0.42715475, 0.429762581, 0.431681536,
                      0.433472972, 0.434773541, 0.435725633, 0.43645462, 0.436962503, 0.437260105, 0.437401983,
                      0.437448021, 0.437452907, 0.437454857, 0.437455538, 0.4374558, 0.43745596, 0.437456036,
                      0.437456066, 0.437456075, 0.437456076, 0.437456076, 0.437456076, 0.437456076, 0.437456077,
                      0.437456077, 0.437456077, 0.437456077, 0.437456076, 0.437456076, 0.437456076, 0.437456076,
                      0.437456076, 0.437456076, 0.437456076, 0.437456076]

robot_elbow_x = [-0.028831328, -0.028843099, -0.028912417, -0.029106323, -0.029560215, -0.030482797, -0.031981284,
                 -0.034168596, -0.037231748, -0.041850799, -0.047437784, -0.053739441, -0.061723821, -0.066303958,
                 -0.070550502, -0.075852386, -0.081557272, -0.082642139, -0.083670228, -0.084124545, -0.08453384,
                 -0.085031305, -0.085391549, -0.085641741, -0.085793761, -0.085873162, -0.085906147, -0.085913473,
                 -0.085914051, -0.085914307, -0.085914463, -0.085914569, -0.085914634, -0.08591467, -0.085914687,
                 -0.085914694, -0.085914695, -0.085914695, -0.085914696, -0.085914696, -0.085914696, -0.085914696,
                 -0.085914696, -0.085914696, -0.085914696, -0.085914696, -0.085900335, -0.085735654, -0.085421029,
                 -0.084853269, -0.083987052, -0.082685964, -0.080575289, -0.077273753, -0.073373547, -0.06761639,
                 -0.061332562, -0.055502208, -0.04952765, -0.042134404, -0.039879975, -0.037589774, -0.035119846,
                 -0.034450307, -0.034223708, -0.033996865, -0.033811028, -0.033256294, -0.032539352, -0.031914156,
                 -0.031680942, -0.032101949, -0.033361875, -0.03560095, -0.039074806, -0.045622832, -0.04806301,
                 -0.049939608, -0.051801132, -0.053540991, -0.055265308, -0.057345741, -0.059799491, -0.062880174,
                 -0.067302227, -0.072492688, -0.078461382, -0.085776996, -0.089979254, -0.093871891, -0.098729987,
                 -0.103960198, -0.106855095, -0.109234426, -0.111456766, -0.112976769, -0.113391302, -0.113241061,
                 -0.11229492, -0.110207409, -0.107381861, -0.104471038, -0.10128694, -0.096997953, -0.094501572,
                 -0.091845556, -0.090770585, -0.089802936, -0.089078611, -0.088508225, -0.088123145, -0.087895218,
                 -0.087783022, -0.08774119, -0.087735177, -0.087734126, -0.087733586, -0.087733444, -0.087733804,
                 -0.087771005, -0.087994829, -0.088562004, -0.089557645, -0.091143508, -0.093436599, -0.096647918,
                 -0.101687879, -0.107149125, -0.114865327, -0.120008752, -0.124811611, -0.126513326, -0.12816408,
                 -0.129018941, -0.129859098, -0.130985642, -0.132207197, -0.133609129, -0.135249199, -0.137273726,
                 -0.140352865, -0.141451544, -0.142492838, -0.143017789, -0.143441241, -0.143715123, -0.143751861,
                 -0.143512652, -0.142957332, -0.142013888, -0.140485567, -0.137995364, -0.135214278, -0.131009548,
                 -0.124787392, -0.119208674, -0.113179337, -0.105691501, -0.09693111, -0.094770352, -0.093113654,
                 -0.091616873, -0.090916455, -0.090972841, -0.091832505, -0.093640478, -0.09644306, -0.100355483,
                 -0.105595788, -0.107695358, -0.109477853, -0.110725428, -0.111559332, -0.112407898, -0.113087062,
                 -0.113406715, -0.112512445, -0.10959183, -0.104544061, -0.097338732, -0.087184177, -0.073610259,
                 -0.05787681, -0.041943982, -0.038329405, -0.035110234, -0.032905443, -0.031158491, -0.029993007,
                 -0.02930793, -0.028973629, -0.028850713, -0.028835285]
robot_elbow_y = [-0.109680684, -0.109699015, -0.109806971, -0.110108963, -0.110815857, -0.112252694, -0.114586448,
                 -0.117992986, -0.122763562, -0.129957308, -0.138658521, -0.14847277, -0.160907706, -0.168040846,
                 -0.174654446, -0.182911642, -0.191796476, -0.193486055, -0.19508721, -0.195794766, -0.196432206,
                 -0.197206961, -0.197768008, -0.198157659, -0.198394417, -0.198518076, -0.198569447, -0.198580856,
                 -0.198581756, -0.198582155, -0.198582398, -0.198582564, -0.198582665, -0.198582721, -0.198582747,
                 -0.198582758, -0.19858276, -0.19858276, -0.198582761, -0.198582761, -0.198582761, -0.198582761,
                 -0.198582761, -0.198582761, -0.198582761, -0.198582761, -0.198560395, -0.19830392, -0.19781392,
                 -0.196929687, -0.195580633, -0.193554309, -0.190267127, -0.185125291, -0.179051078, -0.170084838,
                 -0.160298356, -0.151218118, -0.141913294, -0.130398997, -0.126887931, -0.123321154, -0.119474469,
                 -0.118431725, -0.118078817, -0.11772547, -0.117434977, -0.116544186, -0.115260712, -0.113750758,
                 -0.112196112, -0.110730482, -0.109390536, -0.108090835, -0.106587444, -0.103842058, -0.102726501,
                 -0.101823694, -0.10088729, -0.099973697, -0.099030285, -0.097839854, -0.096359476, -0.094377915,
                 -0.091277104, -0.087211859, -0.081883512, -0.074184937, -0.06902776, -0.063633057, -0.055798634,
                 -0.045314181, -0.037987978, -0.030478486, -0.020940085, -0.009866484, -0.001873598, 0.006128619,
                 0.015841367, 0.026747427, 0.03647237, 0.044123689, 0.051010328, 0.058757935, 0.062694105, 0.06652437,
                 0.067983812, 0.069256989, 0.070186174, 0.070904104, 0.071382135, 0.071662602, 0.071799993, 0.071851106,
                 0.071858448, 0.071859732, 0.071860391, 0.071860564, 0.071860124, 0.071917482, 0.072265733, 0.073148842,
                 0.074699337, 0.077169103, 0.080740348, 0.085741668, 0.093590938, 0.102096325, 0.114113597, 0.122124008,
                 0.129604017, 0.132254282, 0.134825178, 0.136156545, 0.137465013, 0.139219501, 0.141121961, 0.143305339,
                 0.145859597, 0.149012611, 0.153808086, 0.155519178, 0.157140897, 0.15795846, 0.158617947, 0.159044492,
                 0.159101709, 0.158729163, 0.157864303, 0.156394976, 0.154014758, 0.150136496, 0.14580521, 0.139256732,
                 0.129566298, 0.12087796, 0.111487823, 0.09982621, 0.086182709, 0.082817528, 0.080237374, 0.077618024,
                 0.075149624, 0.072563205, 0.06944331, 0.065476967, 0.060309097, 0.053021071, 0.041398168, 0.035553614,
                 0.029600323, 0.02451918, 0.020389279, 0.01502026, 0.008510606, -0.000137499, -0.014214367,
                 -0.029167256, -0.043950396, -0.058191658, -0.072525976, -0.086270665, -0.097526267, -0.10536508,
                 -0.1067331, -0.107834917, -0.108528013, -0.109042406, -0.109368722, -0.109554293, -0.109643179,
                 -0.109675586, -0.109679643]
robot_elbow_z = [0.437456076, 0.437444174, 0.437374014, 0.437177175, 0.436713089, 0.435755286, 0.434157522, 0.431729398,
                 0.428130021, 0.422235037, 0.414279865, 0.404066783, 0.388824999, 0.378622001, 0.367939247, 0.352426629,
                 0.331719807, 0.327082854, 0.322403114, 0.320233848, 0.318220318, 0.315690763, 0.313797686, 0.31245022,
                 0.311617636, 0.311178463, 0.31099513, 0.310954343, 0.310951123, 0.310949698, 0.310948829, 0.310948234,
                 0.310947874, 0.310947675, 0.310947579, 0.310947542, 0.310947533, 0.310947532, 0.310947532, 0.310947532,
                 0.310947532, 0.310947532, 0.310947532, 0.310947532, 0.310947532, 0.310947532, 0.311027472, 0.311937146,
                 0.313640347, 0.316606926, 0.320897411, 0.326889358, 0.335687216, 0.347737615, 0.360029305, 0.375459115,
                 0.389642085, 0.400942803, 0.411048616, 0.42185377, 0.424821645, 0.427693638, 0.430636953, 0.43140821,
                 0.431666718, 0.431924274, 0.432134954, 0.432773109, 0.433665068, 0.434659322, 0.435597419, 0.436362485,
                 0.436902758, 0.437228152, 0.437388643, 0.437447168, 0.437451799, 0.437453718, 0.437454799, 0.437455368,
                 0.437455687, 0.437455891, 0.437456001, 0.437456053, 0.437456072, 0.437456076, 0.437456076, 0.437456077,
                 0.437456076, 0.437456076, 0.437456076, 0.437456077, 0.437456077, 0.437456076, 0.437456076, 0.437456077,
                 0.437456077, 0.437456076, 0.437456076, 0.437456077, 0.437456077, 0.437456077, 0.437456076, 0.437456076,
                 0.437456076, 0.437456076, 0.437456076, 0.437456076, 0.437456076, 0.437456076, 0.437456076, 0.437456076,
                 0.437456076, 0.437456076, 0.437456076, 0.437456076, 0.437456076, 0.437456076, 0.437456076, 0.437418658,
                 0.437191719, 0.436611338, 0.435574634, 0.433875709, 0.431312828, 0.427503457, 0.420970471, 0.413047408,
                 0.400106351, 0.390112045, 0.379552358, 0.375473921, 0.371324559, 0.369094958, 0.366846304, 0.363736382,
                 0.36023248, 0.356026638, 0.350827037, 0.343928659, 0.332163691, 0.327494263, 0.322780006, 0.320280987,
                 0.318198193, 0.31681675, 0.316629293, 0.317840679, 0.320573338, 0.324986276, 0.331614735, 0.341322811,
                 0.350941155, 0.363669159, 0.379609029, 0.391749171, 0.403128486, 0.4152542, 0.42715475, 0.429762581,
                 0.431681536, 0.433472972, 0.434773541, 0.435725633, 0.43645462, 0.436962503, 0.437260105, 0.437401983,
                 0.437448021, 0.437452907, 0.437454857, 0.437455538, 0.4374558, 0.43745596, 0.437456036, 0.437456066,
                 0.437456075, 0.437456076, 0.437456076, 0.437456076, 0.437456076, 0.437456077, 0.437456077, 0.437456077,
                 0.437456077, 0.437456076, 0.437456076, 0.437456076, 0.437456076, 0.437456076, 0.437456076, 0.437456076,
                 0.437456076]

robot_forearm_x = [-0.131127289, -0.13115355, -0.131308127, -0.131739773, -0.132745759, -0.134771263, -0.138004697,
                   -0.14259384, -0.148743908, -0.157351016, -0.166551128, -0.175062706, -0.182338618, -0.184293389,
                   -0.184276536, -0.181087578, -0.172061288, -0.169410428, -0.16652873, -0.165125807, -0.163786893,
                   -0.162056102, -0.160726216, -0.159762003, -0.159159025, -0.158838772, -0.158704637, -0.15867476,
                   -0.1586724, -0.158671356, -0.158670719, -0.158670283, -0.15867002, -0.158669873, -0.158669803,
                   -0.158669776, -0.15866977, -0.158669769, -0.158669769, -0.158669769, -0.158669769, -0.158669769,
                   -0.158669768, -0.158669768, -0.158669768, -0.158669768, -0.158728319, -0.159391067, -0.160614378,
                   -0.162689143, -0.165559353, -0.169295306, -0.174158894, -0.179481066, -0.183080364, -0.184493975,
                   -0.182089132, -0.177037189, -0.169610063, -0.157851415, -0.153781792, -0.149440597, -0.144539238,
                   -0.143173219, -0.142707398, -0.142239331, -0.141854771, -0.14070428, -0.139224605, -0.137980633,
                   -0.137659552, -0.138875475, -0.142067293, -0.14756631, -0.155966289, -0.171565054, -0.177310711,
                   -0.181704347, -0.1860407, -0.190073357, -0.194050145, -0.19882115, -0.204408795, -0.211360642,
                   -0.221207216, -0.232545484, -0.245247003, -0.260213094, -0.268431294, -0.275725812, -0.284261879,
                   -0.29239557, -0.296112758, -0.298401228, -0.29923803, -0.297466189, -0.294420723, -0.289908818,
                   -0.282455795, -0.271434075, -0.259110886, -0.247635428, -0.23584673, -0.220754985, -0.212266298,
                   -0.203419044, -0.199885065, -0.196724807, -0.194371506, -0.192525446, -0.191282562, -0.190548182,
                   -0.190187028, -0.190052432, -0.190033088, -0.190029706, -0.19002797, -0.190027513, -0.190028672,
                   -0.190111865, -0.190610421, -0.191866838, -0.19404865, -0.197459809, -0.202247026, -0.208644038,
                   -0.21788925, -0.226663572, -0.236423536, -0.240841967, -0.243102549, -0.243396422, -0.243394197,
                   -0.243273666, -0.243070962, -0.242660925, -0.242025635, -0.241031895, -0.239473619, -0.236881023,
                   -0.231206914, -0.22855699, -0.225671185, -0.224059701, -0.222674956, -0.221736112, -0.22160748,
                   -0.22243353, -0.224251066, -0.227047306, -0.230906528, -0.235755107, -0.239511579, -0.24265044,
                   -0.243096313, -0.240280488, -0.234587317, -0.22445935, -0.209190065, -0.204948814, -0.201583542,
                   -0.198570558, -0.197595573, -0.198715689, -0.202256547, -0.20877505, -0.218578039, -0.232412015,
                   -0.251951325, -0.260395693, -0.268076022, -0.273922744, -0.278208789, -0.28317123, -0.288282959,
                   -0.293566095, -0.298504739, -0.298650585, -0.293203918, -0.281894316, -0.263000095, -0.234952802,
                   -0.200034183, -0.162839102, -0.154189479, -0.146426007, -0.141077145, -0.136821091, -0.133972963,
                   -0.132295607, -0.131476237, -0.13117483, -0.131136994]
robot_forearm_y = [-0.268997203, -0.269038103, -0.269278842, -0.269951091, -0.27151782, -0.274672356, -0.279708131,
                   -0.286855297, -0.296433461, -0.309838237, -0.324166564, -0.337422561, -0.348754123, -0.351798498,
                   -0.351772251, -0.346805743, -0.332748129, -0.328619659, -0.324131681, -0.321946757, -0.319861522,
                   -0.317165975, -0.315094801, -0.313593128, -0.312654044, -0.31215528, -0.311946377, -0.311899846,
                   -0.311896172, -0.311894546, -0.311893554, -0.311892875, -0.311892464, -0.311892237, -0.311892127,
                   -0.311892085, -0.311892075, -0.311892074, -0.311892074, -0.311892073, -0.311892073, -0.311892073,
                   -0.311892073, -0.311892073, -0.311892073, -0.311892073, -0.31198326, -0.31301543, -0.314920623,
                   -0.318151878, -0.322621965, -0.328440368, -0.336014956, -0.344303748, -0.349909324, -0.352110892,
                   -0.348365571, -0.340497636, -0.328930573, -0.310617564, -0.304279501, -0.297518491, -0.289885075,
                   -0.287757628, -0.287032155, -0.286303019, -0.285701208, -0.283836578, -0.281077724, -0.27767509,
                   -0.273910233, -0.269984236, -0.265906273, -0.261400176, -0.255718547, -0.245236455, -0.241091592,
                   -0.237787965, -0.23440525, -0.231144327, -0.227814281, -0.223661487, -0.218565982, -0.211850412,
                   -0.201547115, -0.188351959, -0.171486935, -0.147793797, -0.132281902, -0.11631482, -0.09353633,
                   -0.063707861, -0.043256159, -0.02259575, 0.003234566, 0.032676087, 0.053575166, 0.0742074,
                   0.098856385, 0.126005568, 0.149717764, 0.168019509, 0.184201468, 0.202042316, 0.210942835,
                   0.219487024, 0.222710174, 0.225506566, 0.227538082, 0.229102191, 0.230140919, 0.230749326,
                   0.231047085, 0.231157812, 0.231173715, 0.231176495, 0.231177922, 0.231178297, 0.231177345,
                   0.231305315, 0.232080851, 0.234037014, 0.237434644, 0.242747018, 0.250202575, 0.260165298,
                   0.274563854, 0.288229048, 0.303429293, 0.31031059, 0.313831237, 0.314288918, 0.314285452,
                   0.314097737, 0.313782044, 0.313143449, 0.312154043, 0.310606385, 0.308179513, 0.304141785,
                   0.295304884, 0.291177872, 0.286683497, 0.284173759, 0.282017147, 0.280554984, 0.280354651,
                   0.281641148, 0.284471793, 0.288826677, 0.294837061, 0.302388274, 0.308238633, 0.313127119,
                   0.313821525, 0.309436139, 0.30056955, 0.284796176, 0.261015673, 0.254410316, 0.249169216,
                   0.243692694, 0.238404855, 0.232786673, 0.225945756, 0.217160798, 0.205553605, 0.188864419,
                   0.161536203, 0.147497927, 0.133011532, 0.120505179, 0.110247007, 0.096789451, 0.080292561, 0.0580761,
                   0.021184575, -0.019018151, -0.059877569, -0.100446281, -0.142775386, -0.18534034, -0.222576248,
                   -0.251072276, -0.256475078, -0.260985221, -0.263914949, -0.266146295, -0.267591305, -0.268424539,
                   -0.268826822, -0.268974023, -0.268992472]
robot_forearm_z = [0.559024095, 0.558970412, 0.558654024, 0.557766847, 0.555677885, 0.55137868, 0.544243241,
                   0.533486396, 0.517733618, 0.492431557, 0.459266275, 0.418337086, 0.360703934, 0.324431415,
                   0.28843659, 0.239779934, 0.181497789, 0.169491062, 0.157761099, 0.152455808, 0.147606258,
                   0.141616022, 0.13720745, 0.134108302, 0.13220951, 0.131212896, 0.130797873, 0.130705622, 0.13069834,
                   0.130695118, 0.130693152, 0.130691807, 0.130690993, 0.130690542, 0.130690325, 0.130690241,
                   0.130690222, 0.13069022, 0.130690219, 0.130690219, 0.130690218, 0.130690218, 0.130690218,
                   0.130690218, 0.130690218, 0.130690218, 0.130871044, 0.132936728, 0.136843909, 0.143772448,
                   0.154069776, 0.168998341, 0.192074266, 0.225914449, 0.263091829, 0.313562865, 0.363688785,
                   0.406188011, 0.446116428, 0.49081638, 0.503457561, 0.515839433, 0.528680932, 0.532071346,
                   0.533210102, 0.534345846, 0.535275758, 0.538097303, 0.542053146, 0.546479337, 0.550671644,
                   0.554102265, 0.556531166, 0.557996541, 0.558719989, 0.558983916, 0.559004805, 0.55901346,
                   0.559018331, 0.5590209, 0.559022341, 0.55902326, 0.559023755, 0.559023989, 0.559024075, 0.559024092,
                   0.559024095, 0.559024096, 0.559024096, 0.559024095, 0.559024095, 0.559024096, 0.559024096,
                   0.559024095, 0.559024096, 0.559024096, 0.559024096, 0.559024095, 0.559024096, 0.559024096,
                   0.559024097, 0.559024096, 0.559024096, 0.559024095, 0.559024095, 0.559024095, 0.559024095,
                   0.559024095, 0.559024095, 0.559024095, 0.559024095, 0.559024095, 0.559024095, 0.559024095,
                   0.559024095, 0.559024095, 0.559024095, 0.559024095, 0.559024095, 0.558855337, 0.557832377,
                   0.55522039, 0.550569632, 0.542989403, 0.531651478, 0.515014979, 0.487084352, 0.45422879, 0.402964517,
                   0.365410942, 0.327662231, 0.313613328, 0.29962358, 0.292232808, 0.28486839, 0.274831424, 0.263728917,
                   0.250690466, 0.235005989, 0.214939025, 0.18266721, 0.170540895, 0.158691379, 0.152570203, 0.14755337,
                   0.144268422, 0.143825281, 0.146699979, 0.153280564, 0.164187761, 0.181221488, 0.207578919,
                   0.235345064, 0.274616366, 0.327859528, 0.371440823, 0.414669846, 0.46326784, 0.513504977,
                   0.524850024, 0.533275414, 0.541200002, 0.546988938, 0.551245843, 0.554516109, 0.556800083,
                   0.55814054, 0.558780142, 0.558987765, 0.5590098, 0.559018596, 0.559021667, 0.559022847, 0.559023571,
                   0.559023912, 0.55902405, 0.559024087, 0.559024094, 0.559024095, 0.559024095, 0.559024096,
                   0.559024096, 0.559024096, 0.559024096, 0.559024096, 0.559024095, 0.559024095, 0.559024095,
                   0.559024095, 0.559024095, 0.559024095, 0.559024095, 0.559024095]

robot_wrist_x = [-0.160679455, -0.160711996, -0.160903493, -0.161437889, -0.162681319, -0.16517596, -0.169131606,
                 -0.174682118, -0.181980005, -0.191835184, -0.201665971, -0.209549031, -0.213596511, -0.212246134,
                 -0.208052607, -0.197890013, -0.178653236, -0.17366505, -0.16842729, -0.165935788, -0.163589565,
                 -0.160598666, -0.158330391, -0.156701017, -0.155688297, -0.155152318, -0.154928212, -0.154878326,
                 -0.154874387, -0.154842629, -0.154714181, -0.154424931, -0.153945105, -0.153240403, -0.15225497,
                 -0.150801381, -0.148735797, -0.148051797, -0.147415506, -0.147010508, -0.146742936, -0.146549959,
                 -0.146435702, -0.146377702, -0.146355007, -0.146351042, -0.146421603, -0.147224548, -0.148711722,
                 -0.151249749, -0.154798191, -0.159497948, -0.165813035, -0.173197833, -0.178997705, -0.18332999,
                 -0.183787973, -0.181166521, -0.176050936, -0.166946216, -0.16364615, -0.160069359, -0.155973681,
                 -0.154822833, -0.154429528, -0.154033908, -0.153708692, -0.152737235, -0.151501621, -0.150510615,
                 -0.150386943, -0.151685005, -0.154789785, -0.159970322, -0.167700007, -0.181616643, -0.18660385,
                 -0.190365299, -0.194077681, -0.19766973, -0.201375489, -0.205993374, -0.211557481, -0.218603277,
                 -0.228673394, -0.240301256, -0.253327575, -0.26866282, -0.277076612, -0.284536252, -0.29325046,
                 -0.301524062, -0.305281584, -0.307565887, -0.308335459, -0.306403423, -0.30319088, -0.298467909,
                 -0.290699564, -0.279244453, -0.266460583, -0.254570902, -0.242365753, -0.226750689, -0.217971795,
                 -0.208824607, -0.205171495, -0.201905009, -0.199472788, -0.197564923, -0.19628048, -0.195521563,
                 -0.195148348, -0.195009258, -0.194989268, -0.194985773, -0.194983978, -0.194983507, -0.194984705,
                 -0.19506792, -0.195566489, -0.196822914, -0.199004731, -0.202415892, -0.20720311, -0.213600123,
                 -0.222845336, -0.231619657, -0.241379622, -0.245798053, -0.248058634, -0.248352508, -0.248350282,
                 -0.248215692, -0.24789967, -0.247097044, -0.245729535, -0.243581073, -0.240370513, -0.23543841,
                 -0.225745991, -0.221535152, -0.217100932, -0.214682863, -0.212667051, -0.21141347, -0.211473702,
                 -0.213087364, -0.216370519, -0.221431706, -0.228686442, -0.238578729, -0.247382478, -0.257131103,
                 -0.265377705, -0.267786886, -0.266080961, -0.258786642, -0.244255766, -0.239819715, -0.236212737,
                 -0.232960144, -0.23203034, -0.233534507, -0.237886103, -0.245740264, -0.257434339, -0.27379075,
                 -0.29658652, -0.306289219, -0.315013424, -0.321709652, -0.326735224, -0.332689656, -0.338969523,
                 -0.345632891, -0.352238674, -0.353267473, -0.347705232, -0.335210045, -0.313791025, -0.281562355,
                 -0.241101162, -0.197763831, -0.187659917, -0.178583778, -0.172326687, -0.167345815, -0.164011606,
                 -0.162047599, -0.161088101, -0.16073513, -0.160690821]
robot_wrist_y = [-0.315021975, -0.315072654, -0.315370893, -0.316203166, -0.318139693, -0.322024866, -0.328185419,
                 -0.33682983, -0.348195616, -0.363544147, -0.378854691, -0.39113183, -0.397435406, -0.395332318,
                 -0.388801287, -0.372973985, -0.343014481, -0.33524584, -0.327088512, -0.323208229, -0.319554202,
                 -0.314896153, -0.311363523, -0.308825925, -0.307248707, -0.306413968, -0.306064944, -0.305987251,
                 -0.305981117, -0.305931657, -0.30573161, -0.305281131, -0.304533846, -0.303436337, -0.301901617,
                 -0.299637786, -0.29642083, -0.295355562, -0.294364598, -0.293733852, -0.293317132, -0.293016588,
                 -0.292838644, -0.292748314, -0.292712969, -0.292706793, -0.292816685, -0.294067198, -0.296383334,
                 -0.300336077, -0.305862449, -0.313181886, -0.323017052, -0.334518193, -0.343550958, -0.350298093,
                 -0.351011358, -0.346928689, -0.338961638, -0.324781876, -0.319642328, -0.314071807, -0.307693166,
                 -0.305900826, -0.305288291, -0.304671974, -0.304162384, -0.302571427, -0.300159445, -0.297040011,
                 -0.293331122, -0.289089776, -0.284224313, -0.278384455, -0.270688519, -0.256521299, -0.251040287,
                 -0.246724953, -0.242399028, -0.238442385, -0.234611761, -0.230040129, -0.224607197, -0.217580529,
                 -0.20689649, -0.193252964, -0.175828119, -0.151359427, -0.135346323, -0.118867141, -0.095364632,
                 -0.064598917, -0.043511383, -0.022213851, 0.004405754, 0.034736979, 0.056261438, 0.077505639,
                 0.102878207, 0.130813976, 0.155203328, 0.174021534, 0.190654184, 0.208984069, 0.21812523, 0.226897827,
                 0.23020643, 0.233076621, 0.235161544, 0.236766649, 0.237832543, 0.238456838, 0.238762367, 0.238875982,
                 0.2388923, 0.238895153, 0.238896617, 0.238897002, 0.238896024, 0.23902398, 0.239799508, 0.241755666,
                 0.245153292, 0.250465664, 0.257921221, 0.267883943, 0.282282499, 0.295947694, 0.311147938, 0.318029236,
                 0.321549882, 0.322007564, 0.322004097, 0.321794486, 0.32130231, 0.320052295, 0.317922527, 0.314576494,
                 0.309576343, 0.301895048, 0.2868, 0.280242007, 0.273336118, 0.269570199, 0.266430758, 0.264478421,
                 0.264572227, 0.267085356, 0.272198568, 0.2800809, 0.29137948, 0.306785805, 0.320496832, 0.335679415,
                 0.348522737, 0.352274815, 0.349617995, 0.338257765, 0.315627267, 0.308718527, 0.303100992, 0.297091874,
                 0.291101728, 0.284565439, 0.276443025, 0.265860553, 0.251762024, 0.231429719, 0.198175641, 0.181142379,
                 0.163616258, 0.148611488, 0.136412561, 0.120501108, 0.101060061, 0.074900067, 0.031411474,
                 -0.016086192, -0.064478717, -0.112653097, -0.163069526, -0.213960152, -0.258701176, -0.29316483,
                 -0.299733549, -0.305228479, -0.308804422, -0.311531822, -0.313300034, -0.314320383, -0.314813206,
                 -0.314993571, -0.315016178]
robot_wrist_z = [0.594143745, 0.594071957, 0.593648841, 0.592462199, 0.589667047, 0.583910112, 0.574344206, 0.559903974,
                 0.538734598, 0.504740799, 0.460341733, 0.406048562, 0.331071572, 0.285081058, 0.24059781, 0.182701906,
                 0.117653069, 0.10496981, 0.092856148, 0.087473098, 0.082607284, 0.076672017, 0.072358875, 0.069355664,
                 0.067527702, 0.066571985, 0.066174755, 0.066086521, 0.066079557, 0.066082544, 0.06610696, 0.066168464,
                 0.066281941, 0.06647202, 0.066783834, 0.067342624, 0.068344759, 0.06873215, 0.069118073, 0.069376756,
                 0.069553304, 0.069683446, 0.069761617, 0.069801618, 0.069817329, 0.069820077, 0.069992582, 0.071961812,
                 0.075690858, 0.082317281, 0.092196389, 0.106578869, 0.128936313, 0.161963187, 0.19853253, 0.248598575,
                 0.298764878, 0.341638881, 0.38221891, 0.428033764, 0.441074246, 0.4538877, 0.46722261, 0.470751603,
                 0.471937716, 0.473121101, 0.474090224, 0.477030017, 0.48114204, 0.485709284, 0.489960503, 0.493308398,
                 0.495477193, 0.496493088, 0.496565184, 0.495765107, 0.495446477, 0.495215982, 0.495014375, 0.494880168,
                 0.494795138, 0.494735842, 0.494701131, 0.494683411, 0.494676268, 0.494674825, 0.494674592, 0.494674361,
                 0.494674521, 0.494674567, 0.49467456, 0.494674452, 0.494674523, 0.494674556, 0.494674541, 0.494674438,
                 0.494674517, 0.494674553, 0.494674541, 0.494674448, 0.494674345, 0.494674466, 0.494674544, 0.494674553,
                 0.494674577, 0.494674582, 0.494674582, 0.494674583, 0.494674583, 0.494674583, 0.494674583, 0.494674583,
                 0.494674583, 0.494674583, 0.494674583, 0.494674583, 0.494674583, 0.494674583, 0.494674583, 0.494505824,
                 0.493482864, 0.490870878, 0.48622012, 0.478639891, 0.467301966, 0.450665467, 0.42273484, 0.389879278,
                 0.338615005, 0.30106143, 0.263312719, 0.249263815, 0.235274068, 0.227879591, 0.220485713, 0.210352057,
                 0.199091422, 0.185861923, 0.170027189, 0.149993886, 0.118457824, 0.106853371, 0.095656482, 0.089929873,
                 0.085248424, 0.082139627, 0.081590069, 0.084043949, 0.089938122, 0.100024092, 0.116351492, 0.142789345,
                 0.171998513, 0.215398934, 0.277616464, 0.331027386, 0.385905276, 0.449538474, 0.517106424, 0.532572623,
                 0.544100496, 0.555016082, 0.563184197, 0.569455985, 0.574654645, 0.57886605, 0.582223107, 0.585256461,
                 0.588824839, 0.590423732, 0.59196144, 0.592954643, 0.593454648, 0.593818439, 0.594017957, 0.5941097,
                 0.594139252, 0.594143877, 0.594144407, 0.594144272, 0.594144308, 0.594144687, 0.594145213, 0.594145032,
                 0.594144381, 0.594144059, 0.594143909, 0.59414382, 0.594143775, 0.594143755, 0.594143747, 0.594143746,
                 0.594143745]

# 로봇 베이스와 카메라 사이의 상대적 위치 고려하는 부분, y축방향으로 1m 떨어져 있다고 가정
for i in range(193):
    robot_base_y[i] = robot_base_y[i] + 1
    robot_shoulder_y[i] = robot_shoulder_y[i] + 1
    robot_inner_link_y[i] = robot_inner_link_y[i] + 1
    robot_elbow_y[i] = robot_elbow_y[i] + 1
    robot_forearm_y[i] = robot_forearm_y[i] + 1
    robot_wrist_y[i] = robot_wrist_y[i] + 1

robot_base_xyz = [0 for i in range(193)]
robot_shoulder_xyz = [0 for i in range(193)]
robot_inner_link_xyz = [0 for i in range(193)]
robot_elbow_xyz = [0 for i in range(193)]
robot_forearm_xyz = [0 for i in range(193)]
robot_wrist_xyz = [0 for i in range(193)]
for i in range(193):
    robot_base_xyz[i] = [robot_base_x[i], robot_base_y[i], robot_base_z[i]]
    robot_shoulder_xyz[i] = [robot_shoulder_x[i], robot_shoulder_y[i], robot_shoulder_z[i]]
    robot_inner_link_xyz[i] = [robot_inner_link_x[i], robot_inner_link_y[i], robot_inner_link_z[i]]
    robot_elbow_xyz[i] = [robot_elbow_x[i], robot_elbow_y[i], robot_elbow_z[i]]
    robot_forearm_xyz[i] = [robot_forearm_x[i], robot_forearm_y[i], robot_forearm_z[i]]
    robot_wrist_xyz[i] = [robot_wrist_x[i], robot_wrist_y[i], robot_wrist_z[i]]

dc = DepthCamera()
# 여기는 while문 밖에 위치해야할듯 임의로 처음 simul하는대로
human_head_simul = box(pos=vector(0, 0, 0), axis=vector(0, 0, 1),
                       size=vector(0, 0, 0), color=color.blue, opacity=0.3)
human_head_real_simul = sphere(pos=vector(0, 0, 0), radius=0)

human_right_arm1_simul = box(pos=vector(0, 0, 0), axis=vector(0, 0, 0),
                             size=vector(0, 0, 0), color=color.blue, opacity=0.3)
human_right_arm1_real_simul = box(pos=vector(0, 0, 0), axis=vector(0, 0, 1),
                                  size=vector(0, 0, 0))

human_right_arm2_simul = box(pos=vector(0, 0, 0), axis=vector(0, 0, 0),
                             size=vector(0, 0, 0), color=color.blue, opacity=0.3)
human_right_arm2_real_simul = box(pos=vector(0, 0, 0), axis=vector(0, 0, 1),
                                  size=vector(0, 0, 0))

human_left_arm1_simul = box(pos=vector(0, 0, 0), axis=vector(0, 0, 0),
                            size=vector(0, 0, 0), color=color.blue, opacity=0.3)
human_left_arm1_real_simul = box(pos=vector(0, 0, 0), axis=vector(0, 0, 1),
                                 size=vector(0, 0, 0))

human_left_arm2_simul = box(pos=vector(0, 0, 0), axis=vector(0, 0, 0),
                            size=vector(0, 0, 0), color=color.blue, opacity=0.3)
human_left_arm2_real_simul = box(pos=vector(0, 0, 0), axis=vector(0, 0, 1),
                                 size=vector(0, 0, 0))

human_body_simul = box(pos=vector(0, 0, 0), axis=vector(0, 0, 0),
                       size=vector(0, 0, 0), color=color.blue, opacity=0.3)
human_body_real_simul = box(pos=vector(0, 0, 0), axis=vector(0, 0, 1),
                            size=vector(0, 0, 0))

robot_base_simul = box(pos=vector(0, 0, 0), axis=vector(0, 0, 1),
                       size=vector(0, 0, 0), color=color.red, opacity=0.3)
robot_base_real_simul = box(pos=vector(0, 0, 0), axis=vector(0, 0, 1),
                       size=vector(0, 0, 0))


robot_shoulder1_simul = box(pos=vector(0, 0, 0), axis=vector(0, 0, 0),
                            size=vector(0, 0, 0), color=color.red, opacity=0.3)
robot_shoulder1_real_simul = box(pos=vector(0, 0, 0), axis=vector(0, 0, 1),
                       size=vector(0, 0, 0))


robot_shoulder2_simul = box(pos=vector(0, 0, 0), axis=vector(0, 0, 0),
                            size=vector(0, 0, 0), color=color.red, opacity=0.3)
robot_shoulder2_real_simul = box(pos=vector(0, 0, 0), axis=vector(0, 0, 1),
                       size=vector(0, 0, 0))


robot_inner_link_simul = box(pos=vector(0, 0, 0), axis=vector(0, 0, 0),
                             size=vector(0, 0, 0), color=color.red, opacity=0.3)
robot_inner_link_real_simul = box(pos=vector(0, 0, 0), axis=vector(0, 0, 1),
                       size=vector(0, 0, 0))


robot_elbow_simul = box(pos=vector(0, 0, 0), axis=vector(0, 0, 0),
                        size=vector(0, 0, 0), color=color.red, opacity=0.3)
robot_elbow_real_simul = box(pos=vector(0, 0, 0), axis=vector(0, 0, 1),
                       size=vector(0, 0, 0))


robot_forearm_simul = box(pos=vector(0, 0, 0), axis=vector(0, 0, 0),
                          size=vector(0, 0, 0), color=color.red, opacity=0.3)
robot_forearm_real_simul = box(pos=vector(0, 0, 0), axis=vector(0, 0, 1),
                       size=vector(0, 0, 0))


robot_wrist_simul = box(pos=vector(0, 0, 0), axis=vector(0, 0, 0),
                        size=vector(0, 0, 0), color=color.red, opacity=0.3)
robot_wrist_real_simul = box(pos=vector(0, 0, 0), axis=vector(0, 0, 1),
                       size=vector(0, 0, 0))
desk_simul = box(pos=vector(0, 0, 0), axis=vector(0, 0, 1),
                       size=vector(0, 0, 0))

desk_simul = box(pos=vector(robot_base_x[0], robot_base_y[0], 0.02), axis=vector(0, 0, 1),
                  size=vector(0.04, 1, 1),color= color.green)
desk_leg1_simul = box(pos = vector(robot_base_x[0]+0.45, robot_base_y[0]+0.45,-0.3), axis = vector(0,0,1),
                     size =vector(0.6,0.1,0.1),color = color.green)
desk_leg2_simul = box(pos = vector(robot_base_x[0]+0.45,robot_base_y[0]-0.45,-0.3), axis = vector(0,0,1),
                     size =vector(0.6,0.1,0.1),color = color.green)
desk_leg3_simul = box(pos = vector(robot_base_x[0]-0.45,robot_base_y[0]+0.45,-0.3), axis = vector(0,0,1),
                     size =vector(0.6,0.1,0.1),color = color.green)
desk_leg4_simul = box(pos = vector(robot_base_x[0]-0.45,robot_base_y[0]-0.45,-0.3), axis = vector(0,0,1),
                     size =vector(0.6,0.1,0.1),color = color.green)

start_t = timeit.default_timer()  # start time save
check_before_t = timeit.default_timer()
i = 0
robot_stop = 0

while True:

    ret, color_frame, depth_frame, depth_colormap, depth_frame_for_intrinsic = dc.get_frame()

    # Reshape image
    img_color = color_frame.copy()
    img_color = tf.image.resize_with_pad(np.expand_dims(img_color, axis=0), 256, 256)
    input_image_color = tf.cast(img_color, dtype=tf.float32)

    # Setup input and output
    input_details_color = interpreter.get_input_details()
    output_details_color = interpreter.get_output_details()

    # Make predictions
    interpreter.set_tensor(input_details_color[0]['index'], np.array(input_image_color))
    interpreter.invoke()
    keypoints_with_scores_color = interpreter.get_tensor(output_details_color[0]['index'])

    # Rendering
    draw_connections(color_frame, keypoints_with_scores_color, EDGES, 0.4)
    draw_keypoints(color_frame, keypoints_with_scores_color, 0.4)

    # Pixel to 3d coordinates from depth images
    depth_intrin = depth_frame_for_intrinsic.profile.as_video_stream_profile().intrinsics

    # get distance from each keypoints
    # 17 keypoints (in the order of: [nose, left eye, right eye, left ear, right ear, left shoulder, right shoulder,
    #                                left elbow, right elbow, left wrist, right wrist, left hip, right hip, left knee,
    #                                right knee, left ankle, right ankle]  index 0부터 시작
    nose = get_3d_coordinates(0)
    left_shoulder = get_3d_coordinates(5)
    right_shoulder = get_3d_coordinates(6)
    left_elbow = get_3d_coordinates(7)
    right_elbow = get_3d_coordinates(8)
    left_hip = get_3d_coordinates(11)
    right_hip = get_3d_coordinates(12)
    left_wrist = get_3d_coordinates(9)
    right_wrist = get_3d_coordinates(10)

    human_head_data = [nose, [1, 0, 0], [0, 1, 0], [0, 0, 1], [0.15, 0.15, 0.24]]
    human_right_arm1_data = [[(right_shoulder[0] + right_elbow[0]) / 2, (right_shoulder[1] + right_elbow[1]) / 2,
                              (right_shoulder[2] + right_elbow[2]) / 2],
                             make_unit_vector(get_own_xyz(right_shoulder, right_elbow))[0].tolist(),
                             make_unit_vector(get_own_xyz(right_shoulder, right_elbow))[1].tolist(),
                             make_unit_vector(get_own_xyz(right_shoulder, right_elbow))[2].tolist(),
                             [0.05, 0.05, point_distance(right_shoulder, right_elbow)]]
    human_right_arm2_data = [[(right_elbow[0] + right_wrist[0]) / 2, (right_elbow[1] + right_wrist[1]) / 2,
                              (right_elbow[2] + right_wrist[2]) / 2],
                             make_unit_vector(get_own_xyz(right_elbow, right_wrist))[0].tolist(),
                             make_unit_vector(get_own_xyz(right_elbow, right_wrist))[1].tolist(),
                             make_unit_vector(get_own_xyz(right_elbow, right_wrist))[2].tolist(),
                             [0.05, 0.05, point_distance(right_elbow, right_wrist)]]
    human_left_arm1_data = [[(left_shoulder[0] + left_elbow[0]) / 2, (left_shoulder[1] + left_elbow[1]) / 2,
                             (left_shoulder[2] + left_elbow[2]) / 2],
                            make_unit_vector(get_own_xyz(left_shoulder, left_elbow))[0].tolist(),
                            make_unit_vector(get_own_xyz(left_shoulder, left_elbow))[1].tolist(),
                            make_unit_vector(get_own_xyz(left_shoulder, left_elbow))[2].tolist(),
                            [0.05, 0.05, point_distance(left_shoulder, left_elbow)]]
    human_left_arm2_data = [
        [(left_elbow[0] + left_wrist[0]) / 2, (left_elbow[1] + left_wrist[1]) / 2, (left_elbow[2] + left_wrist[2]) / 2],
        make_unit_vector(get_own_xyz(left_elbow, left_wrist))[0].tolist(),
        make_unit_vector(get_own_xyz(left_elbow, left_wrist))[1].tolist(),
        make_unit_vector(get_own_xyz(left_elbow, left_wrist))[2].tolist(),
        [0.05, 0.05, point_distance(left_elbow, left_wrist)]]
    human_body_data = [[(right_shoulder[0] + left_shoulder[0]) / 2, (right_shoulder[1] + left_shoulder[1]) / 2,
                        (right_shoulder[2] + right_hip[2]) / 2], [1, 0, 0], [0, 1, 0], [0, 0, 1],
                       [point_distance(right_shoulder, left_shoulder), point_distance(right_shoulder, left_shoulder),
                        point_distance(right_shoulder, right_hip)]]

    human_head = np.array(human_head_data)
    human_right_arm1 = np.array(human_right_arm1_data)
    human_right_arm2 = np.array(human_right_arm2_data)
    human_left_arm1 = np.array(human_left_arm1_data)
    human_left_arm2 = np.array(human_left_arm2_data)
    human_body = np.array(human_body_data)

    human_head_simul.pos = vector(nose[0], nose[1], nose[2])
    human_head_simul.axis = vector(0, 0, 1)
    human_head_simul.size = vector(0.24, 0.15, 0.15)
    human_head_real_simul.pos = vector(nose[0], nose[1], nose[2])
    human_head_real_simul.radius = 0.075

    human_right_arm1_simul.pos = vector((right_shoulder[0] + right_elbow[0]) / 2,
                                        (right_shoulder[1] + right_elbow[1]) / 2,
                                        (right_shoulder[2] + right_elbow[2]) / 2)
    human_right_arm1_simul.axis = vector(make_unit_vector(get_own_xyz(right_shoulder, right_elbow))[2][0],
                                         make_unit_vector(get_own_xyz(right_shoulder, right_elbow))[2][1],
                                         make_unit_vector(get_own_xyz(right_shoulder, right_elbow))[2][2])
    human_right_arm1_simul.size = vector(point_distance(right_shoulder, right_elbow), 0.08, 0.08)
    human_right_arm1_real_simul.pos = vector((right_shoulder[0] + right_elbow[0]) / 2,
                                             (right_shoulder[1] + right_elbow[1]) / 2,
                                             (right_shoulder[2] + right_elbow[2]) / 2)
    human_right_arm1_real_simul.axis = vector(make_unit_vector(get_own_xyz(right_shoulder, right_elbow))[2][0],
                                              make_unit_vector(get_own_xyz(right_shoulder, right_elbow))[2][1],
                                              make_unit_vector(get_own_xyz(right_shoulder, right_elbow))[2][2])
    human_right_arm1_real_simul.size = vector(point_distance(right_shoulder, right_elbow), 0.05, 0.05)

    human_right_arm2_simul.pos = vector((right_elbow[0] + right_wrist[0]) / 2, (right_elbow[1] + right_wrist[1]) / 2,
                                        (right_elbow[2] + right_wrist[2]) / 2)
    human_right_arm2_simul.axis = vector(make_unit_vector(get_own_xyz(right_elbow, right_wrist))[2][0],
                                         make_unit_vector(get_own_xyz(right_elbow, right_wrist))[2][1],
                                         make_unit_vector(get_own_xyz(right_elbow, right_wrist))[2][2])
    human_right_arm2_simul.size = vector(point_distance(right_elbow, right_wrist), 0.08, 0.08)
    human_right_arm2_real_simul.pos = vector((right_elbow[0] + right_wrist[0]) / 2,
                                             (right_elbow[1] + right_wrist[1]) / 2,
                                             (right_elbow[2] + right_wrist[2]) / 2)
    human_right_arm2_real_simul.axis = vector(make_unit_vector(get_own_xyz(right_elbow, right_wrist))[2][0],
                                              make_unit_vector(get_own_xyz(right_elbow, right_wrist))[2][1],
                                              make_unit_vector(get_own_xyz(right_elbow, right_wrist))[2][2])
    human_right_arm2_real_simul.size = vector(point_distance(right_elbow, right_wrist), 0.05, 0.05)

    human_left_arm1_simul.pos = vector((left_shoulder[0] + left_elbow[0]) / 2, (left_shoulder[1] + left_elbow[1]) / 2,
                                       (left_shoulder[2] + left_elbow[2]) / 2)
    human_left_arm1_simul.axis = vector(make_unit_vector(get_own_xyz(left_shoulder, left_elbow))[2][0],
                                        make_unit_vector(get_own_xyz(left_shoulder, left_elbow))[2][1],
                                        make_unit_vector(get_own_xyz(left_shoulder, left_elbow))[2][2])
    human_left_arm1_simul.size = vector(point_distance(left_shoulder, left_elbow), 0.08, 0.08)
    human_left_arm1_real_simul.pos = vector((left_shoulder[0] + left_elbow[0]) / 2,
                                            (left_shoulder[1] + left_elbow[1]) / 2,
                                            (left_shoulder[2] + left_elbow[2]) / 2)
    human_left_arm1_real_simul.axis = vector(make_unit_vector(get_own_xyz(left_shoulder, left_elbow))[2][0],
                                             make_unit_vector(get_own_xyz(left_shoulder, left_elbow))[2][1],
                                             make_unit_vector(get_own_xyz(left_shoulder, left_elbow))[2][2])
    human_left_arm1_real_simul.size = vector(point_distance(left_shoulder, left_elbow), 0.05, 0.05)

    human_left_arm2_simul.pos = vector((left_elbow[0] + left_wrist[0]) / 2, (left_elbow[1] + left_wrist[1]) / 2,
                                       (left_elbow[2] + left_wrist[2]) / 2)
    human_left_arm2_simul.axis = vector(make_unit_vector(get_own_xyz(left_elbow, left_wrist))[2][0],
                                        make_unit_vector(get_own_xyz(left_elbow, left_wrist))[2][1],
                                        make_unit_vector(get_own_xyz(left_elbow, left_wrist))[2][2])
    human_left_arm2_simul.size = vector(point_distance(left_elbow, left_wrist), 0.08, 0.08)
    human_left_arm2_real_simul.pos = vector((left_elbow[0] + left_wrist[0]) / 2, (left_elbow[1] + left_wrist[1]) / 2,
                                            (left_elbow[2] + left_wrist[2]) / 2)
    human_left_arm2_real_simul.axis = vector(make_unit_vector(get_own_xyz(left_elbow, left_wrist))[2][0],
                                             make_unit_vector(get_own_xyz(left_elbow, left_wrist))[2][1],
                                             make_unit_vector(get_own_xyz(left_elbow, left_wrist))[2][2])
    human_left_arm2_real_simul.size = vector(point_distance(left_elbow, left_wrist), 0.05, 0.05)

    human_body_simul.pos = vector((right_shoulder[0] + left_shoulder[0]) / 2,
                                  (right_shoulder[1] + left_shoulder[1]) / 2, (right_shoulder[2] + right_hip[2]) / 2)
    human_body_simul.axis = vector(0, 0, 1)
    human_body_simul.size = vector(point_distance(right_shoulder, right_hip) + 0.05,
                                   point_distance(right_shoulder, left_shoulder) + 0.05,
                                   point_distance(right_shoulder, left_shoulder) + 0.05)
    human_body_real_simul.pos = vector((right_shoulder[0] + left_shoulder[0]) / 2,
                                       (right_shoulder[1] + left_shoulder[1]) / 2,
                                       (right_shoulder[2] + right_hip[2]) / 2)
    human_body_real_simul.axis = vector(0, 0, 1)
    human_body_real_simul.size = vector(point_distance(right_shoulder, right_hip),
                                        point_distance(right_shoulder, left_shoulder),
                                        point_distance(right_shoulder, left_shoulder))

    cv2.imshow('Depth frame', depth_frame)
    cv2.imshow('Color frame', color_frame)
    cv2.imshow('depth_colormap', depth_colormap)

    check_t = timeit.default_timer()
    if (check_t - check_before_t) > 0.1:
        robot_base_data = [[robot_base_xyz[i][0], robot_base_xyz[i][1], robot_base_xyz[i][2] + 0.08], [1, 0, 0],
                           [0, 1, 0], [0, 0, 1], [0.05, 0.05, 0.32]]
        robot_shoulder1_data = [[robot_base_xyz[i][0] + 0.035, robot_base_xyz[i][1], robot_base_xyz[i][2] + 0.2],
                                [0, 1, 0], [0, 0, 1],
                                make_unit_vector(get_own_xyz(robot_base_xyz[i], robot_shoulder_xyz[i]))[0].tolist(),
                                [0.05, 0.05, 0.07]]
        robot_shoulder2_data = [[(robot_shoulder_xyz[i][0] + robot_inner_link_xyz[i][0]) / 2,
                                 (robot_shoulder_xyz[i][1] + robot_inner_link_xyz[i][1]) / 2,
                                 (robot_shoulder_xyz[i][2] + robot_inner_link_xyz[i][2]) / 2],
                                make_unit_vector(get_own_xyz(robot_shoulder_xyz[i], robot_inner_link_xyz[i]))[
                                    0].tolist(),
                                make_unit_vector(get_own_xyz(robot_shoulder_xyz[i], robot_inner_link_xyz[i]))[
                                    1].tolist(),
                                make_unit_vector(get_own_xyz(robot_shoulder_xyz[i], robot_inner_link_xyz[i]))[
                                    2].tolist(), [0.05, 0.05, 0.225]]
        robot_inner_link_data = [[(robot_inner_link_xyz[i][0] + robot_elbow_xyz[i][0]) / 2,
                                  (robot_inner_link_xyz[i][1] + robot_elbow_xyz[i][1]) / 2,
                                  (robot_inner_link_xyz[i][2] + robot_elbow_xyz[i][2]) / 2],
                                 make_unit_vector(get_own_xyz(robot_inner_link_xyz[i], robot_elbow_xyz[i]))[0].tolist(),
                                 make_unit_vector(get_own_xyz(robot_inner_link_xyz[i], robot_elbow_xyz[i]))[1].tolist(),
                                 make_unit_vector(get_own_xyz(robot_inner_link_xyz[i], robot_elbow_xyz[i]))[2].tolist(),
                                 [0.05, 0.05, 0.035]]
        robot_elbow_data = [[(robot_elbow_xyz[i][0] + robot_forearm_xyz[i][0]) / 2,
                             (robot_elbow_xyz[i][1] + robot_forearm_xyz[i][1]) / 2,
                             (robot_elbow_xyz[i][2] + robot_forearm_xyz[i][2]) / 2],
                            make_unit_vector(get_own_xyz(robot_elbow_xyz[i], robot_forearm_xyz[i]))[0].tolist(),
                            make_unit_vector(get_own_xyz(robot_elbow_xyz[i], robot_forearm_xyz[i]))[1].tolist(),
                            make_unit_vector(get_own_xyz(robot_elbow_xyz[i], robot_forearm_xyz[i]))[2].tolist(),
                            [0.05, 0.05, 0.225]]
        robot_forearm_data = [[(robot_forearm_xyz[i][0] + robot_wrist_xyz[i][0]) / 2,
                               (robot_forearm_xyz[i][1] + robot_wrist_xyz[i][1]) / 2,
                               (robot_forearm_xyz[i][2] + robot_wrist_xyz[i][2]) / 2],
                              make_unit_vector(get_own_xyz(robot_forearm_xyz[i], robot_wrist_xyz[i]))[0].tolist(),
                              make_unit_vector(get_own_xyz(robot_forearm_xyz[i], robot_wrist_xyz[i]))[1].tolist(),
                              make_unit_vector(get_own_xyz(robot_forearm_xyz[i], robot_wrist_xyz[i]))[2].tolist(),
                              [0.05, 0.05, 0.065]]
        robot_wrist_data = [[robot_wrist_xyz[i][0], robot_wrist_xyz[i][1], robot_wrist_xyz[i][2]],
                            make_unit_vector(get_own_xyz(robot_forearm_xyz[i], robot_wrist_xyz[i]))[0].tolist(),
                            make_unit_vector(get_own_xyz(robot_forearm_xyz[i], robot_wrist_xyz[i]))[1].tolist(),
                            make_unit_vector(get_own_xyz(robot_forearm_xyz[i], robot_wrist_xyz[i]))[2].tolist(),
                            [0.05, 0.05, 0.04]]

        robot_base = np.array(robot_base_data)
        robot_shoulder1 = np.array(robot_shoulder1_data)
        robot_shoulder2 = np.array(robot_shoulder2_data)
        robot_inner_link = np.array(robot_inner_link_data)
        robot_elbow = np.array(robot_elbow_data)
        robot_forearm = np.array(robot_forearm_data)
        robot_wrist = np.array(robot_wrist_data)

        flag = checkOBBcollision(robot_base, human_head) or checkOBBcollision(robot_shoulder1,
                                                                              human_head) or checkOBBcollision(
            robot_shoulder2, human_head) or checkOBBcollision(robot_inner_link, human_head) or checkOBBcollision(
            robot_elbow, human_head) or checkOBBcollision(robot_forearm, human_head) or checkOBBcollision(robot_wrist,
                                                                                                          human_head) or checkOBBcollision(robot_base, human_right_arm1) or checkOBBcollision(robot_shoulder1, human_right_arm1) or checkOBBcollision(robot_shoulder2, human_right_arm1) or checkOBBcollision(robot_inner_link, human_right_arm1) or checkOBBcollision(robot_elbow, human_right_arm1) or checkOBBcollision(robot_forearm, human_right_arm1) or checkOBBcollision(robot_wrist, human_right_arm1)

        robot_base_simul.pos = vector(robot_base_xyz[i][0], robot_base_xyz[i][1], robot_base_xyz[i][2] + 0.08)
        robot_base_simul.axis = vector(0, 0, 1)
        robot_base_simul.size = vector(0.24, 0.08, 0.08)
        robot_base_real_simul.pos = vector(robot_base_xyz[i][0], robot_base_xyz[i][1], robot_base_xyz[i][2] + 0.08)
        robot_base_real_simul.axis = vector(0, 0, 1)
        robot_base_real_simul.size = vector(0.24, 0.05, 0.05)


        robot_shoulder1_simul.pos = vector(robot_base_xyz[i][0] + 0.035, robot_base_xyz[i][1],
                                           robot_base_xyz[i][2] + 0.2)
        robot_shoulder1_simul.axis = vector(
            make_unit_vector(get_own_xyz(robot_base_xyz[i], robot_shoulder_xyz[i]))[0][0],
            make_unit_vector(get_own_xyz(robot_base_xyz[i], robot_shoulder_xyz[i]))[0][1],
            make_unit_vector(get_own_xyz(robot_base_xyz[i], robot_shoulder_xyz[i]))[0][2])
        robot_shoulder1_simul.size = vector(0.07, 0.08, 0.08)
        robot_shoulder1_real_simul.pos = vector(robot_base_xyz[i][0] + 0.035, robot_base_xyz[i][1],
                                           robot_base_xyz[i][2] + 0.2)
        robot_shoulder1_real_simul.axis = vector(
            make_unit_vector(get_own_xyz(robot_base_xyz[i], robot_shoulder_xyz[i]))[0][0],
            make_unit_vector(get_own_xyz(robot_base_xyz[i], robot_shoulder_xyz[i]))[0][1],
            make_unit_vector(get_own_xyz(robot_base_xyz[i], robot_shoulder_xyz[i]))[0][2])
        robot_shoulder1_real_simul.size = vector(0.07, 0.05, 0.05)





        robot_shoulder2_simul.pos = vector((robot_shoulder_xyz[i][0] + robot_inner_link_xyz[i][0]) / 2,
                                           (robot_shoulder_xyz[i][1] + robot_inner_link_xyz[i][1]) / 2,
                                           (robot_shoulder_xyz[i][2] + robot_inner_link_xyz[i][2]) / 2)
        robot_shoulder2_simul.axis = vector(
            make_unit_vector(get_own_xyz(robot_shoulder_xyz[i], robot_inner_link_xyz[i]))[2][0],
            make_unit_vector(get_own_xyz(robot_shoulder_xyz[i], robot_inner_link_xyz[i]))[2][1],
            make_unit_vector(get_own_xyz(robot_shoulder_xyz[i], robot_inner_link_xyz[i]))[2][2])
        robot_shoulder2_simul.size = vector(0.225, 0.08, 0.08)
        robot_shoulder2_real_simul.pos = vector((robot_shoulder_xyz[i][0] + robot_inner_link_xyz[i][0]) / 2,
                                           (robot_shoulder_xyz[i][1] + robot_inner_link_xyz[i][1]) / 2,
                                           (robot_shoulder_xyz[i][2] + robot_inner_link_xyz[i][2]) / 2)
        robot_shoulder2_real_simul.axis = vector(
            make_unit_vector(get_own_xyz(robot_shoulder_xyz[i], robot_inner_link_xyz[i]))[2][0],
            make_unit_vector(get_own_xyz(robot_shoulder_xyz[i], robot_inner_link_xyz[i]))[2][1],
            make_unit_vector(get_own_xyz(robot_shoulder_xyz[i], robot_inner_link_xyz[i]))[2][2])
        robot_shoulder2_real_simul.size = vector(0.225, 0.05, 0.05)





        robot_inner_link_simul.pos = vector((robot_inner_link_xyz[i][0] + robot_elbow_xyz[i][0]) / 2,
                                            (robot_inner_link_xyz[i][1] + robot_elbow_xyz[i][1]) / 2,
                                            (robot_inner_link_xyz[i][2] + robot_elbow_xyz[i][2]) / 2)
        robot_inner_link_simul.axis = vector(
            make_unit_vector(get_own_xyz(robot_inner_link_xyz[i], robot_elbow_xyz[i]))[2][0],
            make_unit_vector(get_own_xyz(robot_inner_link_xyz[i], robot_elbow_xyz[i]))[2][1],
            make_unit_vector(get_own_xyz(robot_inner_link_xyz[i], robot_elbow_xyz[i]))[2][2])
        robot_inner_link_simul.size = vector(0.035, 0.08, 0.08)
        robot_inner_link_real_simul.pos = vector((robot_inner_link_xyz[i][0] + robot_elbow_xyz[i][0]) / 2,
                                            (robot_inner_link_xyz[i][1] + robot_elbow_xyz[i][1]) / 2,
                                            (robot_inner_link_xyz[i][2] + robot_elbow_xyz[i][2]) / 2)
        robot_inner_link_real_simul.axis = vector(
            make_unit_vector(get_own_xyz(robot_inner_link_xyz[i], robot_elbow_xyz[i]))[2][0],
            make_unit_vector(get_own_xyz(robot_inner_link_xyz[i], robot_elbow_xyz[i]))[2][1],
            make_unit_vector(get_own_xyz(robot_inner_link_xyz[i], robot_elbow_xyz[i]))[2][2])
        robot_inner_link_real_simul.size = vector(0.035, 0.05, 0.05)




        robot_elbow_simul.pos = vector((robot_elbow_xyz[i][0] + robot_forearm_xyz[i][0]) / 2,
                                       (robot_elbow_xyz[i][1] + robot_forearm_xyz[i][1]) / 2,
                                       (robot_elbow_xyz[i][2] + robot_forearm_xyz[i][2]) / 2)
        robot_elbow_simul.axis = vector(make_unit_vector(get_own_xyz(robot_elbow_xyz[i], robot_forearm_xyz[i]))[2][0],
                                        make_unit_vector(get_own_xyz(robot_elbow_xyz[i], robot_forearm_xyz[i]))[2][1],
                                        make_unit_vector(get_own_xyz(robot_elbow_xyz[i], robot_forearm_xyz[i]))[2][2])
        robot_elbow_simul.size = vector(0.225, 0.08, 0.08)
        robot_elbow_real_simul.pos = vector((robot_elbow_xyz[i][0] + robot_forearm_xyz[i][0]) / 2,
                                       (robot_elbow_xyz[i][1] + robot_forearm_xyz[i][1]) / 2,
                                       (robot_elbow_xyz[i][2] + robot_forearm_xyz[i][2]) / 2)
        robot_elbow_real_simul.axis = vector(make_unit_vector(get_own_xyz(robot_elbow_xyz[i], robot_forearm_xyz[i]))[2][0],
                                        make_unit_vector(get_own_xyz(robot_elbow_xyz[i], robot_forearm_xyz[i]))[2][1],
                                        make_unit_vector(get_own_xyz(robot_elbow_xyz[i], robot_forearm_xyz[i]))[2][2])
        robot_elbow_real_simul.size = vector(0.225, 0.05, 0.05)




        robot_forearm_simul.pos = vector((robot_forearm_xyz[i][0] + robot_wrist_xyz[i][0]) / 2,
                                         (robot_forearm_xyz[i][1] + robot_wrist_xyz[i][1]) / 2,
                                         (robot_forearm_xyz[i][2] + robot_wrist_xyz[i][2]) / 2)
        robot_forearm_simul.axis = vector(make_unit_vector(get_own_xyz(robot_forearm_xyz[i], robot_wrist_xyz[i]))[2][0],
                                          make_unit_vector(get_own_xyz(robot_forearm_xyz[i], robot_wrist_xyz[i]))[2][1],
                                          make_unit_vector(get_own_xyz(robot_forearm_xyz[i], robot_wrist_xyz[i]))[2][2])
        robot_forearm_simul.size = vector(0.065, 0.08, 0.08)
        robot_forearm_real_simul.pos = vector((robot_forearm_xyz[i][0] + robot_wrist_xyz[i][0]) / 2,
                                         (robot_forearm_xyz[i][1] + robot_wrist_xyz[i][1]) / 2,
                                         (robot_forearm_xyz[i][2] + robot_wrist_xyz[i][2]) / 2)
        robot_forearm_real_simul.axis = vector(make_unit_vector(get_own_xyz(robot_forearm_xyz[i], robot_wrist_xyz[i]))[2][0],
                                          make_unit_vector(get_own_xyz(robot_forearm_xyz[i], robot_wrist_xyz[i]))[2][1],
                                          make_unit_vector(get_own_xyz(robot_forearm_xyz[i], robot_wrist_xyz[i]))[2][2])
        robot_forearm_real_simul.size = vector(0.065, 0.05, 0.05)



        robot_wrist_simul.pos = vector(robot_wrist_xyz[i][0], robot_wrist_xyz[i][1], robot_wrist_xyz[i][2])
        robot_wrist_simul.axis = vector(make_unit_vector(get_own_xyz(robot_forearm_xyz[i], robot_wrist_xyz[i]))[2][0],
                                        make_unit_vector(get_own_xyz(robot_forearm_xyz[i], robot_wrist_xyz[i]))[2][1],
                                        make_unit_vector(get_own_xyz(robot_forearm_xyz[i], robot_wrist_xyz[i]))[2][2])
        robot_wrist_simul.size = vector(0.04, 0.08, 0.08)
        robot_wrist_real_simul.pos = vector(robot_wrist_xyz[i][0], robot_wrist_xyz[i][1], robot_wrist_xyz[i][2])
        robot_wrist_real_simul.axis = vector(make_unit_vector(get_own_xyz(robot_forearm_xyz[i], robot_wrist_xyz[i]))[2][0],
                                        make_unit_vector(get_own_xyz(robot_forearm_xyz[i], robot_wrist_xyz[i]))[2][1],
                                        make_unit_vector(get_own_xyz(robot_forearm_xyz[i], robot_wrist_xyz[i]))[2][2])
        robot_wrist_real_simul.size = vector(0.04, 0.05, 0.05)

        i = i + 1
        check_before_t = check_t

        if flag == True:
            print("Collision!!!")
            print("Hold on 5 seconds!!!")
            text("Beware of Collision!!!")
        if i == 192:
            print("No collision!!!")
            i = 0

    if cv2.waitKey(10) & 0xFF == ord('q'):
        break
dc.release()
cv2.destroyAllwindows()
